'use strict';

const React = require('react');

const {
  useState,
  useEffect,
  useContext
} = require('react');

const {
  Text,
  Box,
  StdinContext
} = require('ink');

const useInterval = require('./useInterval'); //const { default: StdinContext } = require('ink/build/components/StdinContext');


const FIELD_SIZE = 16;
const FIELD_ROW = [...new Array(FIELD_SIZE).keys()];
const ARROW_UP = '\u001B[A';
const ARROW_DOWN = '\u001B[B';
const ARROW_LEFT = '\u001B[D';
const ARROW_RIGHT = '\u001B[C';
let foodItem = {
  x: Math.floor(Math.random() * FIELD_SIZE),
  y: Math.floor(Math.random() * FIELD_SIZE)
};
const DIRECTION = {
  RIGHT: {
    x: 1,
    y: 0
  },
  LEFT: {
    x: -1,
    y: 0
  },
  TOP: {
    x: 0,
    y: -1
  },
  BOTTOM: {
    x: 0,
    y: 1
  }
};

function getItem(x, y, snakeSegents) {
  if (foodItem.x === x && foodItem.y === y) {
    return /*#__PURE__*/React.createElement(Text, {
      color: "red"
    }, " \u25A0 ");
  }

  for (const segment of snakeSegents) {
    if (segment.x === x && segment.y === y) {
      return /*#__PURE__*/React.createElement(Text, {
        color: "green"
      }, " \u25A0 ");
    }
  }
}

function limitByField(x) {
  if (x >= FIELD_SIZE) {
    return 0;
  }

  if (x < 0) {
    return FIELD_SIZE - 1;
  }

  return x;
}

function newSnakePosition(segments, direction) {
  const [head] = segments;
  const newHead = {
    x: limitByField(head.x + direction.x),
    y: limitByField(head.y + direction.y)
  };
  return [newHead, ...segments.slice(0, -1)];
}

const App = () => {
  const [snakeSegents, setSnakeSegments] = useState([{
    x: 8,
    y: 8
  }, {
    x: 8,
    y: 7
  }, {
    x: 8,
    y: 6
  }]);
  const [direction, setDirection] = useState(DIRECTION.LEFT);
  const {
    stdin,
    setRawMode
  } = useContext(StdinContext);
  useEffect(() => {
    setRawMode(true);
    stdin.on('data', data => {
      const value = data.toString();

      if (value == ARROW_UP) {
        setDirection(DIRECTION.TOP);
      }

      if (value == ARROW_DOWN) {
        setDirection(DIRECTION.BOTTOM);
      }

      if (value == ARROW_LEFT) {
        setDirection(DIRECTION.LEFT);
      }

      if (value == ARROW_RIGHT) {
        setDirection(DIRECTION.RIGHT);
      }
    });
  }, []);
  useInterval(() => {
    setSnakeSegments(segments => newSnakePosition(segments, direction));
  }, 50);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/React.createElement(Text, {
    color: "green"
  }, "Snake"), " game"), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, FIELD_ROW.map(y => /*#__PURE__*/React.createElement(Box, {
    key: y
  }, FIELD_ROW.map(x => /*#__PURE__*/React.createElement(Box, {
    key: x
  }, getItem(x, y, snakeSegents) || /*#__PURE__*/React.createElement(Text, null, " . ")))))));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,