'use strict';

const React = require('react');

const {
  useState
} = require('react');

const {
  Text,
  Box
} = require('ink');

const useInterval = require('./useInterval');

const FIELD_SIZE = 16;
const FIELD_ROW = [...new Array(FIELD_SIZE).keys()];
let foodItem = {
  x: Math.floor(Math.random() * FIELD_SIZE),
  y: Math.floor(Math.random() * FIELD_SIZE)
};
const DIRECTION = {
  RIGHT: {
    x: 1,
    y: 0
  },
  LEFT: {
    x: -1,
    y: 0
  },
  TOP: {
    x: 0,
    y: -1
  },
  BOTTOM: {
    x: 0,
    y: 1
  }
};

function getItem(x, y, snakeSegents) {
  if (foodItem.x === x && foodItem.y === y) {
    return /*#__PURE__*/React.createElement(Text, {
      color: "red"
    }, " \u25A0 ");
  }

  for (const segment of snakeSegents) {
    if (segment.x === x && segment.y === y) {
      return /*#__PURE__*/React.createElement(Text, {
        color: "green"
      }, " \u25A0 ");
    }
  }
}

function limitByField(x) {
  if (x >= FIELD_SIZE) {
    return 0;
  }

  if (x < 0) {
    return FIELD_SIZE - 1;
  }

  return x;
}

function newSnakePosition(segments, direction) {
  const [head] = segments;
  const newHead = {
    x: limitByField(head.x + direction.x),
    y: limitByField(head.y + direction.y)
  };
  return [newHead, ...segments.slice(0, -1)];
}

const App = () => {
  const [snakeSegents, setSnakeSegments] = useState([{
    x: 8,
    y: 8
  }, {
    x: 8,
    y: 7
  }, {
    x: 8,
    y: 6
  }]);
  const [direction, setDirection] = useState(DIRECTION.LEFT);
  useInterval(() => {
    setSnakeSegments(segments => newSnakePosition(segments, direction));
  }, 50);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/React.createElement(Text, {
    color: "green"
  }, "Snake"), " game"), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, FIELD_ROW.map(y => /*#__PURE__*/React.createElement(Box, {
    key: y
  }, FIELD_ROW.map(x => /*#__PURE__*/React.createElement(Box, {
    key: x
  }, getItem(x, y, snakeSegents) || /*#__PURE__*/React.createElement(Text, null, " . ")))))));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiVGV4dCIsIkJveCIsInVzZUludGVydmFsIiwiRklFTERfU0laRSIsIkZJRUxEX1JPVyIsIkFycmF5Iiwia2V5cyIsImZvb2RJdGVtIiwieCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInkiLCJESVJFQ1RJT04iLCJSSUdIVCIsIkxFRlQiLCJUT1AiLCJCT1RUT00iLCJnZXRJdGVtIiwic25ha2VTZWdlbnRzIiwic2VnbWVudCIsImxpbWl0QnlGaWVsZCIsIm5ld1NuYWtlUG9zaXRpb24iLCJzZWdtZW50cyIsImRpcmVjdGlvbiIsImhlYWQiLCJuZXdIZWFkIiwic2xpY2UiLCJBcHAiLCJzZXRTbmFrZVNlZ21lbnRzIiwic2V0RGlyZWN0aW9uIiwibWFwIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0EsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBZUQsT0FBTyxDQUFDLE9BQUQsQ0FBNUI7O0FBQ0EsTUFBTTtBQUFFRSxFQUFBQSxJQUFGO0FBQVFDLEVBQUFBO0FBQVIsSUFBZ0JILE9BQU8sQ0FBQyxLQUFELENBQTdCOztBQUNBLE1BQU1JLFdBQVcsR0FBR0osT0FBTyxDQUFDLGVBQUQsQ0FBM0I7O0FBR0EsTUFBTUssVUFBVSxHQUFHLEVBQW5CO0FBQ0EsTUFBTUMsU0FBUyxHQUFHLENBQUMsR0FBRyxJQUFJQyxLQUFKLENBQVVGLFVBQVYsRUFBc0JHLElBQXRCLEVBQUosQ0FBbEI7QUFFQSxJQUFJQyxRQUFRLEdBQUc7QUFDZEMsRUFBQUEsQ0FBQyxFQUFFQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCUixVQUEzQixDQURXO0FBRWRTLEVBQUFBLENBQUMsRUFBRUgsSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0Us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RVIsRUFGUSxDQUFYO0FBSUEsc0JBQ0Msb0JBQUMsR0FBRDtBQUFLLElBQUEsYUFBYSxFQUFDLFFBQW5CO0FBQTRCLElBQUEsVUFBVSxFQUFDO0FBQXZDLGtCQUNDLG9CQUFDLElBQUQscUJBQ0Msb0JBQUMsSUFBRDtBQUFNLElBQUEsS0FBSyxFQUFDO0FBQVosYUFERCxVQURELGVBSUMsb0JBQUMsR0FBRDtBQUFLLElBQUEsYUFBYSxFQUFDO0FBQW5CLEtBQ0VwQixTQUFTLENBQUMyQixHQUFWLENBQWNuQixDQUFDLGlCQUNmLG9CQUFDLEdBQUQ7QUFBSyxJQUFBLEdBQUcsRUFBRUE7QUFBVixLQUNFUixTQUFTLENBQUMyQixHQUFWLENBQWN2QixDQUFDLGlCQUNmLG9CQUFDLEdBQUQ7QUFBSyxJQUFBLEdBQUcsRUFBRUE7QUFBVixLQUFlVSxPQUFPLENBQUNWLENBQUQsRUFBSUksQ0FBSixFQUFPTyxZQUFQLENBQVAsaUJBQStCLG9CQUFDLElBQUQsY0FBOUMsQ0FEQSxDQURGLENBREEsQ0FERixDQUpELENBREQ7QUFnQkEsQ0E5QkQ7O0FBZ0NBYSxNQUFNLENBQUNDLE9BQVAsR0FBaUJMLEdBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyB1c2VTdGF0ZSB9ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgVGV4dCwgQm94IH0gPSByZXF1aXJlKCdpbmsnKTtcbmNvbnN0IHVzZUludGVydmFsID0gcmVxdWlyZSgnLi91c2VJbnRlcnZhbCcpO1xuXG5cbmNvbnN0IEZJRUxEX1NJWkUgPSAxNjtcbmNvbnN0IEZJRUxEX1JPVyA9IFsuLi5uZXcgQXJyYXkoRklFTERfU0laRSkua2V5cygpXTtcblxubGV0IGZvb2RJdGVtID0ge1xuXHR4OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBGSUVMRF9TSVpFKSxcblx0eTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogRklFTERfU0laRSksXG59XG5cbmNvbnN0IERJUkVDVElPTiA9IHtcblx0UklHSFQ6IHsgeDogMSwgeTogMCB9LFxuXHRMRUZUOiB7IHg6IC0xLCB5OiAwIH0sXG5cdFRPUDogeyB4OiAwLCB5OiAtMSB9LFxuXHRCT1RUT006IHsgeDogMCwgeTogMSB9LFxufVxuXG5mdW5jdGlvbiBnZXRJdGVtKHgsIHksIHNuYWtlU2VnZW50cykge1xuXHRpZiAoZm9vZEl0ZW0ueCA9PT0geCAmJiBmb29kSXRlbS55ID09PSB5KSB7XG5cdFx0cmV0dXJuIDxUZXh0IGNvbG9yPVwicmVkXCI+IOKWoCA8L1RleHQ+XG5cdH1cblx0Zm9yIChjb25zdCBzZWdtZW50IG9mIHNuYWtlU2VnZW50cykge1xuXHRcdGlmIChzZWdtZW50LnggPT09IHggJiYgc2VnbWVudC55ID09PSB5KSB7XG5cdFx0XHRyZXR1cm4gPFRleHQgY29sb3I9XCJncmVlblwiPiDilqAgPC9UZXh0PlxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaW1pdEJ5RmllbGQoeCkge1xuXHRpZiAoeCA+PSBGSUVMRF9TSVpFKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblx0aWYgKHggPCAwKSB7XG5cdFx0cmV0dXJuIEZJRUxEX1NJWkUgLSAxO1xuXHR9XG5cdHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiBuZXdTbmFrZVBvc2l0aW9uKHNlZ21lbnRzLCBkaXJlY3Rpb24pIHtcblx0Y29uc3QgW2hlYWRdID0gc2VnbWVudHM7XG5cdGNvbnN0IG5ld0hlYWQgPSB7XG5cdFx0eDogbGltaXRCeUZpZWxkKGhlYWQueCArIGRpcmVjdGlvbi54KSxcblx0XHR5OiBsaW1pdEJ5RmllbGQoaGVhZC55ICsgZGlyZWN0aW9uLnkpLFxuXHR9O1xuXHRyZXR1cm4gWyBuZXdIZWFkLCAuLi5zZWdtZW50cy5zbGljZSgwLCAtMSldXG59XG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcblxuXHRjb25zdCBbc25ha2VTZWdlbnRzLCBzZXRTbmFrZVNlZ21lbnRzXSA9IHVzZVN0YXRlKFtcblx0XHR7IHg6IDgsIHk6IDggfSxcblx0XHR7IHg6IDgsIHk6IDcgfSxcblx0XHR7IHg6IDgsIHk6IDYgfSxcblx0XSk7XG5cblx0Y29uc3QgW2RpcmVjdGlvbiwgc2V0RGlyZWN0aW9uXSA9IHVzZVN0YXRlKERJUkVDVElPTi5MRUZUKVxuXG5cdHVzZUludGVydmFsKCgpID0+IHtcblx0XHRzZXRTbmFrZVNlZ21lbnRzKHNlZ21lbnRzID0+IG5ld1NuYWtlUG9zaXRpb24oc2VnbWVudHMsIGRpcmVjdGlvbikpXG5cdH0sIDUwKTtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj0nY29sdW1uJyBhbGlnbkl0ZW1zPSdjZW50ZXInPlxuXHRcdFx0PFRleHQ+XG5cdFx0XHRcdDxUZXh0IGNvbG9yPVwiZ3JlZW5cIj5TbmFrZTwvVGV4dD4gZ2FtZVxuXHRcdDwvVGV4dD5cblx0XHRcdDxCb3ggZmxleERpcmVjdGlvbj0nY29sdW1uJz5cblx0XHRcdFx0e0ZJRUxEX1JPVy5tYXAoeSA9PiAoXG5cdFx0XHRcdFx0PEJveCBrZXk9e3l9PlxuXHRcdFx0XHRcdFx0e0ZJRUxEX1JPVy5tYXAoeCA9PiAoXG5cdFx0XHRcdFx0XHRcdDxCb3gga2V5PXt4fSA+e2dldEl0ZW0oeCwgeSwgc25ha2VTZWdlbnRzKSB8fCA8VGV4dD4gLiA8L1RleHQ+fTwvQm94PlxuXHRcdFx0XHRcdFx0KSl9XG5cdFx0XHRcdFx0PC9Cb3g+XG5cdFx0XHRcdCkpfVxuXHRcdFx0PC9Cb3g+XG5cdFx0PC9Cb3g+XG5cdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuXG5cblxuIl19