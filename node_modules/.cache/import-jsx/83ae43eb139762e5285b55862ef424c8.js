'use strict';

const React = require('react');

const {
  useState
} = require('react');

const {
  Text,
  Box
} = require('ink');

const useInterval = require('./useInterval');

const FIELD_SIZE = 16;
const FIELD_ROW = [...new Array(FIELD_SIZE).keys()];
let foodItem = {
  x: Math.floor(Math.random() * FIELD_SIZE),
  y: Math.floor(Math.random() * FIELD_SIZE)
};
const DIRECTION = {
  RIGHT: {
    x: 1,
    y: 0
  },
  LEFT: {
    x: -1,
    y: 0
  },
  TOP: {
    x: 0,
    y: -1
  },
  BOTTOM: {
    x: 0,
    y: 1
  }
};

function getItem(x, y, snakeSegents) {
  if (foodItem.x === x && foodItem.y === y) {
    return /*#__PURE__*/React.createElement(Text, {
      color: "red"
    }, " \u25A0 ");
  }

  for (const segment of snakeSegents) {
    if (segment.x === x && segment.y === y) {
      return /*#__PURE__*/React.createElement(Text, {
        color: "green"
      }, " \u25A0 ");
    }
  }
}

function limitByField(x) {
  if (x >= FIELD_SIZE) {
    return 0;
  }

  if (x < 0) {
    return FIELD_SIZE - 1;
  }

  return x;
}

function newSnakePosition(segments, direction) {
  const [head] = segments;
  const newHead = {
    x: limitByField(head.x + direction.x),
    y: limitByField(head.y + direction.y)
  };
  return [newHead, ...segment.sliece(0, -1)];
}

const App = () => {
  const [snakeSegents, setSnakeSegments] = useState([{
    x: 8,
    y: 8
  }, {
    x: 8,
    y: 7
  }, {
    x: 8,
    y: 6
  }]);
  const [direction, setDirection] = useState(DIRECTION.LEFT);
  useInterval(() => {
    setSnakeSegments(segments => newSnakePosition(segments, direction));
  }, 50);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/React.createElement(Text, {
    color: "green"
  }, "Snake"), " game"), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, FIELD_ROW.map(y => /*#__PURE__*/React.createElement(Box, {
    key: y
  }, FIELD_ROW.map(x => /*#__PURE__*/React.createElement(Box, {
    key: x
  }, getItem(x, y, snakeSegents) || /*#__PURE__*/React.createElement(Text, null, " . ")))))));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiVGV4dCIsIkJveCIsInVzZUludGVydmFsIiwiRklFTERfU0laRSIsIkZJRUxEX1JPVyIsIkFycmF5Iiwia2V5cyIsImZvb2RJdGVtIiwieCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInkiLCJESVJFQ1RJT04iLCJSSUdIVCIsIkxFRlQiLCJUT1AiLCJCT1RUT00iLCJnZXRJdGVtIiwic25ha2VTZWdlbnRzIiwic2VnbWVudCIsImxpbWl0QnlGaWVsZCIsIm5ld1NuYWtlUG9zaXRpb24iLCJzZWdtZW50cyIsImRpcmVjdGlvbiIsImhlYWQiLCJuZXdIZWFkIiwic2xpZWNlIiwiQXBwIiwic2V0U25ha2VTZWdtZW50cyIsInNldERpcmVjdGlvbiIsIm1hcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQWVELE9BQU8sQ0FBQyxPQUFELENBQTVCOztBQUNBLE1BQU07QUFBRUUsRUFBQUEsSUFBRjtBQUFRQyxFQUFBQTtBQUFSLElBQWdCSCxPQUFPLENBQUMsS0FBRCxDQUE3Qjs7QUFDQSxNQUFNSSxXQUFXLEdBQUdKLE9BQU8sQ0FBQyxlQUFELENBQTNCOztBQUdBLE1BQU1LLFVBQVUsR0FBRyxFQUFuQjtBQUNBLE1BQU1DLFNBQVMsR0FBRyxDQUFDLEdBQUcsSUFBSUMsS0FBSixDQUFVRixVQUFWLEVBQXNCRyxJQUF0QixFQUFKLENBQWxCO0FBRUEsSUFBSUMsUUFBUSxHQUFHO0FBQ2RDLEVBQUFBLENBQUMsRUFBRUMsSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0UsTUFBTCxLQUFnQlIsVUFBM0IsQ0FEVztBQUVkUyxFQUFBQSxDQUFDLEVBQUVILElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNF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QUVSLEVBRlEsQ0FBWDtBQUlBLHNCQUNDLG9CQUFDLEdBQUQ7QUFBSyxJQUFBLGFBQWEsRUFBQyxRQUFuQjtBQUE0QixJQUFBLFVBQVUsRUFBQztBQUF2QyxrQkFDQyxvQkFBQyxJQUFELHFCQUNDLG9CQUFDLElBQUQ7QUFBTSxJQUFBLEtBQUssRUFBQztBQUFaLGFBREQsVUFERCxlQUlDLG9CQUFDLEdBQUQ7QUFBSyxJQUFBLGFBQWEsRUFBQztBQUFuQixLQUNFcEIsU0FBUyxDQUFDMkIsR0FBVixDQUFjbkIsQ0FBQyxpQkFDZixvQkFBQyxHQUFEO0FBQUssSUFBQSxHQUFHLEVBQUVBO0FBQVYsS0FDRVIsU0FBUyxDQUFDMkIsR0FBVixDQUFjdkIsQ0FBQyxpQkFDZixvQkFBQyxHQUFEO0FBQUssSUFBQSxHQUFHLEVBQUVBO0FBQVYsS0FBZVUsT0FBTyxDQUFDVixDQUFELEVBQUlJLENBQUosRUFBT08sWUFBUCxDQUFQLGlCQUErQixvQkFBQyxJQUFELGNBQTlDLENBREEsQ0FERixDQURBLENBREYsQ0FKRCxDQUREO0FBZ0JBLENBOUJEOztBQWdDQWEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCTCxHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgdXNlU3RhdGUgfSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IFRleHQsIEJveCB9ID0gcmVxdWlyZSgnaW5rJyk7XG5jb25zdCB1c2VJbnRlcnZhbCA9IHJlcXVpcmUoJy4vdXNlSW50ZXJ2YWwnKTtcblxuXG5jb25zdCBGSUVMRF9TSVpFID0gMTY7XG5jb25zdCBGSUVMRF9ST1cgPSBbLi4ubmV3IEFycmF5KEZJRUxEX1NJWkUpLmtleXMoKV07XG5cbmxldCBmb29kSXRlbSA9IHtcblx0eDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogRklFTERfU0laRSksXG5cdHk6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIEZJRUxEX1NJWkUpLFxufVxuXG5jb25zdCBESVJFQ1RJT04gPSB7XG5cdFJJR0hUOiB7IHg6IDEsIHk6IDAgfSxcblx0TEVGVDogeyB4OiAtMSwgeTogMCB9LFxuXHRUT1A6IHsgeDogMCwgeTogLTEgfSxcblx0Qk9UVE9NOiB7IHg6IDAsIHk6IDEgfSxcbn1cblxuZnVuY3Rpb24gZ2V0SXRlbSh4LCB5LCBzbmFrZVNlZ2VudHMpIHtcblx0aWYgKGZvb2RJdGVtLnggPT09IHggJiYgZm9vZEl0ZW0ueSA9PT0geSkge1xuXHRcdHJldHVybiA8VGV4dCBjb2xvcj1cInJlZFwiPiDilqAgPC9UZXh0PlxuXHR9XG5cdGZvciAoY29uc3Qgc2VnbWVudCBvZiBzbmFrZVNlZ2VudHMpIHtcblx0XHRpZiAoc2VnbWVudC54ID09PSB4ICYmIHNlZ21lbnQueSA9PT0geSkge1xuXHRcdFx0cmV0dXJuIDxUZXh0IGNvbG9yPVwiZ3JlZW5cIj4g4pagIDwvVGV4dD5cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGltaXRCeUZpZWxkKHgpIHtcblx0aWYgKHggPj0gRklFTERfU0laRSkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cdGlmICh4IDwgMCkge1xuXHRcdHJldHVybiBGSUVMRF9TSVpFIC0gMTtcblx0fVxuXHRyZXR1cm4geDtcbn1cblxuZnVuY3Rpb24gbmV3U25ha2VQb3NpdGlvbihzZWdtZW50cywgZGlyZWN0aW9uKSB7XG5cdGNvbnN0IFtoZWFkXSA9IHNlZ21lbnRzO1xuXHRjb25zdCBuZXdIZWFkID0ge1xuXHRcdHg6IGxpbWl0QnlGaWVsZChoZWFkLnggKyBkaXJlY3Rpb24ueCksXG5cdFx0eTogbGltaXRCeUZpZWxkKGhlYWQueSArIGRpcmVjdGlvbi55KSxcblx0fTtcblx0cmV0dXJuIFsgbmV3SGVhZCwgLi4uc2VnbWVudC5zbGllY2UoMCwgLTEpXVxufVxuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG5cblx0Y29uc3QgW3NuYWtlU2VnZW50cywgc2V0U25ha2VTZWdtZW50c10gPSB1c2VTdGF0ZShbXG5cdFx0eyB4OiA4LCB5OiA4IH0sXG5cdFx0eyB4OiA4LCB5OiA3IH0sXG5cdFx0eyB4OiA4LCB5OiA2IH0sXG5cdF0pO1xuXG5cdGNvbnN0IFtkaXJlY3Rpb24sIHNldERpcmVjdGlvbl0gPSB1c2VTdGF0ZShESVJFQ1RJT04uTEVGVClcblxuXHR1c2VJbnRlcnZhbCgoKSA9PiB7XG5cdFx0c2V0U25ha2VTZWdtZW50cyhzZWdtZW50cyA9PiBuZXdTbmFrZVBvc2l0aW9uKHNlZ21lbnRzLCBkaXJlY3Rpb24pKVxuXHR9LCA1MCk7XG5cblx0cmV0dXJuIChcblx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249J2NvbHVtbicgYWxpZ25JdGVtcz0nY2VudGVyJz5cblx0XHRcdDxUZXh0PlxuXHRcdFx0XHQ8VGV4dCBjb2xvcj1cImdyZWVuXCI+U25ha2U8L1RleHQ+IGdhbWVcblx0XHQ8L1RleHQ+XG5cdFx0XHQ8Qm94IGZsZXhEaXJlY3Rpb249J2NvbHVtbic+XG5cdFx0XHRcdHtGSUVMRF9ST1cubWFwKHkgPT4gKFxuXHRcdFx0XHRcdDxCb3gga2V5PXt5fT5cblx0XHRcdFx0XHRcdHtGSUVMRF9ST1cubWFwKHggPT4gKFxuXHRcdFx0XHRcdFx0XHQ8Qm94IGtleT17eH0gPntnZXRJdGVtKHgsIHksIHNuYWtlU2VnZW50cykgfHwgPFRleHQ+IC4gPC9UZXh0Pn08L0JveD5cblx0XHRcdFx0XHRcdCkpfVxuXHRcdFx0XHRcdDwvQm94PlxuXHRcdFx0XHQpKX1cblx0XHRcdDwvQm94PlxuXHRcdDwvQm94PlxuXHQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcDtcblxuXG5cbiJdfQ==