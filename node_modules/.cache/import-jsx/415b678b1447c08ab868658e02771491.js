'use strict';

const React = require('react');

const {
  useState
} = require('react');

const {
  Text,
  Box
} = require('ink');

const useInterval = require('./useInterval');

const FIELD_SIZE = 16;
const FIELD_ROW = [...new Array(FIELD_SIZE).keys()];
let foodItem = {
  x: Math.floor(Math.random() * FIELD_SIZE),
  y: Math.floor(Math.random() * FIELD_SIZE)
};
const DIRECTION = {
  RIGHT: {
    x: 1,
    y: 0
  },
  LEFT: {
    x: -1,
    y: 0
  },
  TOP: {
    x: 0,
    y: -1
  },
  BOTTOM: {
    x: 0,
    y: 1
  }
};

function getItem(x, y, snakeSegents) {
  if (foodItem.x === x && foodItem.y === y) {
    return /*#__PURE__*/React.createElement(Text, {
      color: "red"
    }, " \u25A0 ");
  }

  for (const segment of snakeSegents) {
    if (segment.x === x && segment.y === y) {
      return /*#__PURE__*/React.createElement(Text, {
        color: "green"
      }, " \u25A0 ");
    }
  }
}

function limitByField(x) {
  if (x >= FIELD_SIZE) {
    return 0;
  }

  if (x < 0) {
    return FIELD_SIZE - 1;
  }

  return x;
}

function newSnakePosition(segments, direction) {
  return segments.map(segment => ({
    x: limitByField(segment.x + direction.x),
    y: limitByField(segment.y + direction.y)
  }));
}

const App = () => {
  const [snakeSegents, setSnakeSegments] = useState([{
    x: 8,
    y: 8
  }, {
    x: 8,
    y: 7
  }, {
    x: 8,
    y: 6
  }]);
  const [direction, setDirection] = useState(DIRECTION, LEFT);
  useInterval(() => {
    setSnakeSegments(segments => newSnakePosition(segments, direction));
  }, 50);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/React.createElement(Text, {
    color: "green"
  }, "Snake"), " game"), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, FIELD_ROW.map(y => /*#__PURE__*/React.createElement(Box, {
    key: y
  }, FIELD_ROW.map(x => /*#__PURE__*/React.createElement(Box, {
    key: x
  }, getItem(x, y, snakeSegents) || /*#__PURE__*/React.createElement(Text, null, " . ")))))));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiVGV4dCIsIkJveCIsInVzZUludGVydmFsIiwiRklFTERfU0laRSIsIkZJRUxEX1JPVyIsIkFycmF5Iiwia2V5cyIsImZvb2RJdGVtIiwieCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInkiLCJESVJFQ1RJT04iLCJSSUdIVCIsIkxFRlQiLCJUT1AiLCJCT1RUT00iLCJnZXRJdGVtIiwic25ha2VTZWdlbnRzIiwic2VnbWVudCIsImxpbWl0QnlGaWVsZCIsIm5ld1NuYWtlUG9zaXRpb24iLCJzZWdtZW50cyIsImRpcmVjdGlvbiIsIm1hcCIsIkFwcCIsInNldFNuYWtlU2VnbWVudHMiLCJzZXREaXJlY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFlRCxPQUFPLENBQUMsT0FBRCxDQUE1Qjs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBLElBQUY7QUFBUUMsRUFBQUE7QUFBUixJQUFnQkgsT0FBTyxDQUFDLEtBQUQsQ0FBN0I7O0FBQ0EsTUFBTUksV0FBVyxHQUFHSixPQUFPLENBQUMsZUFBRCxDQUEzQjs7QUFHQSxNQUFNSyxVQUFVLEdBQUcsRUFBbkI7QUFDQSxNQUFNQyxTQUFTLEdBQUcsQ0FBQyxHQUFHLElBQUlDLEtBQUosQ0FBVUYsVUFBVixFQUFzQkcsSUFBdEIsRUFBSixDQUFsQjtBQUVBLElBQUlDLFFBQVEsR0FBRztBQUNkQyxFQUFBQSxDQUFDLEVBQUVDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JSLFVBQTNCLENBRFc7QUFFZFMsRUFBQUEsQ0FBQyxFQUFFSCxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCUixVQUEzQjtBQUZXLENB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Q0Msb0JBQUMsSUFBRDtBQUFNLElBQUEsS0FBSyxFQUFDO0FBQVosYUFERCxVQURELGVBSUMsb0JBQUMsR0FBRDtBQUFLLElBQUEsYUFBYSxFQUFDO0FBQW5CLEtBQ0VwQixTQUFTLENBQUNxQixHQUFWLENBQWNiLENBQUMsaUJBQ2Ysb0JBQUMsR0FBRDtBQUFLLElBQUEsR0FBRyxFQUFFQTtBQUFWLEtBQ0VSLFNBQVMsQ0FBQ3FCLEdBQVYsQ0FBY2pCLENBQUMsaUJBQ2Ysb0JBQUMsR0FBRDtBQUFLLElBQUEsR0FBRyxFQUFFQTtBQUFWLEtBQWVVLE9BQU8sQ0FBQ1YsQ0FBRCxFQUFJSSxDQUFKLEVBQU9PLFlBQVAsQ0FBUCxpQkFBK0Isb0JBQUMsSUFBRCxjQUE5QyxDQURBLENBREYsQ0FEQSxDQURGLENBSkQsQ0FERDtBQWdCQSxDQTlCRDs7QUFnQ0FVLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkosR0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IHVzZVN0YXRlIH0gPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyBUZXh0LCBCb3ggfSA9IHJlcXVpcmUoJ2luaycpO1xuY29uc3QgdXNlSW50ZXJ2YWwgPSByZXF1aXJlKCcuL3VzZUludGVydmFsJyk7XG5cblxuY29uc3QgRklFTERfU0laRSA9IDE2O1xuY29uc3QgRklFTERfUk9XID0gWy4uLm5ldyBBcnJheShGSUVMRF9TSVpFKS5rZXlzKCldO1xuXG5sZXQgZm9vZEl0ZW0gPSB7XG5cdHg6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIEZJRUxEX1NJWkUpLFxuXHR5OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBGSUVMRF9TSVpFKSxcbn1cblxuY29uc3QgRElSRUNUSU9OID0ge1xuXHRSSUdIVDogeyB4OiAxLCB5OiAwIH0sXG5cdExFRlQ6IHsgeDogLTEsIHk6IDAgfSxcblx0VE9QOiB7IHg6IDAsIHk6IC0xIH0sXG5cdEJPVFRPTTogeyB4OiAwLCB5OiAxIH0sXG59XG5cbmZ1bmN0aW9uIGdldEl0ZW0oeCwgeSwgc25ha2VTZWdlbnRzKSB7XG5cdGlmIChmb29kSXRlbS54ID09PSB4ICYmIGZvb2RJdGVtLnkgPT09IHkpIHtcblx0XHRyZXR1cm4gPFRleHQgY29sb3I9XCJyZWRcIj4g4pagIDwvVGV4dD5cblx0fVxuXHRmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc25ha2VTZWdlbnRzKSB7XG5cdFx0aWYgKHNlZ21lbnQueCA9PT0geCAmJiBzZWdtZW50LnkgPT09IHkpIHtcblx0XHRcdHJldHVybiA8VGV4dCBjb2xvcj1cImdyZWVuXCI+IOKWoCA8L1RleHQ+XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpbWl0QnlGaWVsZCh4KSB7XG5cdGlmICh4ID49IEZJRUxEX1NJWkUpIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXHRpZiAoeCA8IDApIHtcblx0XHRyZXR1cm4gRklFTERfU0laRSAtIDE7XG5cdH1cblx0cmV0dXJuIHg7XG59XG5cbmZ1bmN0aW9uIG5ld1NuYWtlUG9zaXRpb24oc2VnbWVudHMsIGRpcmVjdGlvbikge1xuXHRyZXR1cm4gc2VnbWVudHMubWFwKHNlZ21lbnQgPT4gKHtcblx0XHR4OiBsaW1pdEJ5RmllbGQoc2VnbWVudC54ICsgZGlyZWN0aW9uLngpLFxuXHRcdHk6IGxpbWl0QnlGaWVsZChzZWdtZW50LnkgKyBkaXJlY3Rpb24ueSksXG5cdH0pKTtcbn1cblxuY29uc3QgQXBwID0gKCkgPT4ge1xuXG5cdGNvbnN0IFtzbmFrZVNlZ2VudHMsIHNldFNuYWtlU2VnbWVudHNdID0gdXNlU3RhdGUoW1xuXHRcdHsgeDogOCwgeTogOCB9LFxuXHRcdHsgeDogOCwgeTogNyB9LFxuXHRcdHsgeDogOCwgeTogNiB9LFxuXHRdKTtcblxuXHRjb25zdCBbZGlyZWN0aW9uLCBzZXREaXJlY3Rpb25dID0gdXNlU3RhdGUoRElSRUNUSU9OLCBMRUZUKVxuXG5cdHVzZUludGVydmFsKCgpID0+IHtcblx0XHRzZXRTbmFrZVNlZ21lbnRzKHNlZ21lbnRzID0+IG5ld1NuYWtlUG9zaXRpb24oc2VnbWVudHMsIGRpcmVjdGlvbikpXG5cdH0sIDUwKTtcblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj0nY29sdW1uJyBhbGlnbkl0ZW1zPSdjZW50ZXInPlxuXHRcdFx0PFRleHQ+XG5cdFx0XHRcdDxUZXh0IGNvbG9yPVwiZ3JlZW5cIj5TbmFrZTwvVGV4dD4gZ2FtZVxuXHRcdDwvVGV4dD5cblx0XHRcdDxCb3ggZmxleERpcmVjdGlvbj0nY29sdW1uJz5cblx0XHRcdFx0e0ZJRUxEX1JPVy5tYXAoeSA9PiAoXG5cdFx0XHRcdFx0PEJveCBrZXk9e3l9PlxuXHRcdFx0XHRcdFx0e0ZJRUxEX1JPVy5tYXAoeCA9PiAoXG5cdFx0XHRcdFx0XHRcdDxCb3gga2V5PXt4fSA+e2dldEl0ZW0oeCwgeSwgc25ha2VTZWdlbnRzKSB8fCA8VGV4dD4gLiA8L1RleHQ+fTwvQm94PlxuXHRcdFx0XHRcdFx0KSl9XG5cdFx0XHRcdFx0PC9Cb3g+XG5cdFx0XHRcdCkpfVxuXHRcdFx0PC9Cb3g+XG5cdFx0PC9Cb3g+XG5cdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuXG5cblxuIl19