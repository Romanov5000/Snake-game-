'use strict';

const React = require('react');

const {
  useState
} = require('react');

const {
  Text,
  Box,
  Color
} = require('ink');

const FIELD_SIZE = 16;
const FIELD_ROW = [...new Array(FIELD_SIZE).keys()];
let foodItem = {
  x: Math.floor(Math.random() * FIELD_SIZE),
  y: Math.floor(Math.random() * FIELD_SIZE)
};

function getItem(x, y, snakeSegents) {
  if (foodItem.x === x && foodItem.y === y) {
    return /*#__PURE__*/React.createElement(Color, {
      red: true
    }, "\u25A0");
  }

  for (const segment of snakeSegents) {
    if (segment.x === x && segment.y === y) {
      return /*#__PURE__*/React.createElement(Color, {
        green: true
      }, "\u25A0");
    }
  }
}

const App = () => {
  const [snakeSegents, setSnakeSegments] = useState([{
    x: 8,
    y: 8
  }, {
    x: 8,
    y: 7
  }, {
    x: 8,
    y: 6
  }]);
  return /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Text, null, /*#__PURE__*/React.createElement(Text, {
    color: "green"
  }, "Snake"), " game"), /*#__PURE__*/React.createElement(Box, {
    flexDirection: "column"
  }, FIELD_ROW.map(y => /*#__PURE__*/React.createElement(Box, {
    key: y
  }, FIELD_ROW.map(x => /*#__PURE__*/React.createElement(Box, {
    key: x
  }, /*#__PURE__*/React.createElement(Text, null, getItem(x, y, snakeSegents) || ' . ')))))));
};

module.exports = App;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVpLmpzIl0sIm5hbWVzIjpbIlJlYWN0IiwicmVxdWlyZSIsInVzZVN0YXRlIiwiVGV4dCIsIkJveCIsIkNvbG9yIiwiRklFTERfU0laRSIsIkZJRUxEX1JPVyIsIkFycmF5Iiwia2V5cyIsImZvb2RJdGVtIiwieCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInkiLCJnZXRJdGVtIiwic25ha2VTZWdlbnRzIiwic2VnbWVudCIsIkFwcCIsInNldFNuYWtlU2VnbWVudHMiLCJtYXAiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFlRCxPQUFPLENBQUMsT0FBRCxDQUE1Qjs7QUFDQSxNQUFNO0FBQUVFLEVBQUFBLElBQUY7QUFBUUMsRUFBQUEsR0FBUjtBQUFhQyxFQUFBQTtBQUFiLElBQXVCSixPQUFPLENBQUMsS0FBRCxDQUFwQzs7QUFHQSxNQUFNSyxVQUFVLEdBQUcsRUFBbkI7QUFDQSxNQUFNQyxTQUFTLEdBQUcsQ0FBQyxHQUFHLElBQUlDLEtBQUosQ0FBVUYsVUFBVixFQUFzQkcsSUFBdEIsRUFBSixDQUFsQjtBQUVBLElBQUlDLFFBQVEsR0FBRztBQUNkQyxFQUFBQSxDQUFDLEVBQUVDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JSLFVBQTNCLENBRFc7QUFFZFMsRUFBQUEsQ0FBQyxFQUFFSCxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDRSxNQUFMLEtBQWdCUixVQUEzQjtBQUZXLENBQWY7O0FBS0EsU0FBU1UsT0FBVCxDQUFrQkwsQ0FBbEIsRUFBcUJJLENBQXJCLEVBQXdCRSxZQUF4QixFQUFzQztBQUNyQyxNQUFLUCxRQUFRLENBQUNDLENBQVQsS0FBZUEsQ0FBZixJQUFvQkQsUUFBUSxDQUFDSyxDQUFULEtBQWVBLENBQXhDLEVBQTJDO0FBQzFDLHdCQUFPLG9CQUFDLEtBQUQ7QUFBTyxNQUFBLEdBQUc7QUFBVixnQkFBUDtBQUNBOztBQUNELE9BQU0sTUFBTUcsT0FBWixJQUF1QkQsWUFBdkIsRUFBcUM7QUFDcEMsUUFBSUMsT0FBTyxDQUFDUCxDQUFSLEtBQWNBLENBQWQsSUFBbUJPLE9BQU8sQ0FBQ0gsQ0FBUixLQUFjQSxDQUFyQyxFQUF3QztBQUN2QywwQkFBTyxvQkFBQyxLQUFEO0FBQU8sUUFBQSxLQUFLO0FBQVosa0JBQVA7QUFDQTtBQUNEO0FBQ0Q7O0FBRUQsTUFBTUksR0FBRyxHQUFHLE1BQU07QUFFakIsUUFBTSxDQUFDRixZQUFELEVBQWVHLGdCQUFmLElBQW1DbEIsUUFBUSxDQUFDLENBQ2pEO0FBQUNTLElBQUFBLENBQUMsRUFBQyxDQUFIO0FBQU1JLElBQUFBLENBQUMsRUFBQztBQUFSLEdBRGlELEVBRWpEO0FBQUNKLElBQUFBLENBQUMsRUFBQyxDQUFIO0FBQU1JLElBQUFBLENBQUMsRUFBQztBQUFSLEdBRmlELEVBR2pEO0FBQUNKLElBQUFBLENBQUMsRUFBQyxDQUFIO0FBQU1JLElBQUFBLENBQUMsRUFBQztBQUFSLEdBSGlELENBQUQsQ0FBakQ7QUFPQSxzQkFDQyxvQkFBQyxHQUFEO0FBQUssSUFBQSxhQUFhLEVBQUMsUUFBbkI7QUFBNEIsSUFBQSxVQUFVLEVBQUM7QUFBdkMsa0JBQ0Msb0JBQUMsSUFBRCxxQkFDQyxvQkFBQyxJQUFEO0FBQU0sSUFBQSxLQUFLLEVBQUM7QUFBWixhQURELFVBREQsZUFJQyxvQkFBQyxHQUFEO0FBQUssSUFBQSxhQUFhLEVBQUM7QUFBbkIsS0FDRVIsU0FBUyxDQUFDYyxHQUFWLENBQWNOLENBQUMsaUJBQ2Ysb0JBQUMsR0FBRDtBQUFLLElBQUEsR0FBRyxFQUFFQTtBQUFWLEtBQ0VSLFNBQVMsQ0FBQ2MsR0FBVixDQUFjVixDQUFDLGlCQUNmLG9CQUFDLEdBQUQ7QUFBSyxJQUFBLEdBQUcsRUFBRUE7QUFBVixrQkFBYyxvQkFBQyxJQUFELFFBQU9LLE9BQU8sQ0FBQ0wsQ0FBRCxFQUFHSSxDQUFILEVBQUtFLFlBQUwsQ0FBUCxJQUE2QixLQUFwQyxDQUFkLENBREEsQ0FERixDQURBLENBREYsQ0FKRCxDQUREO0FBZ0JBLENBekJEOztBQTJCQUssTUFBTSxDQUFDQyxPQUFQLEdBQWlCSixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IHsgdXNlU3RhdGUgfSA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCB7IFRleHQsIEJveCwgQ29sb3IgfSA9IHJlcXVpcmUoJ2luaycpO1xuXG5cbmNvbnN0IEZJRUxEX1NJWkUgPSAxNjtcbmNvbnN0IEZJRUxEX1JPVyA9IFsuLi5uZXcgQXJyYXkoRklFTERfU0laRSkua2V5cygpXTtcblxubGV0IGZvb2RJdGVtID0ge1xuXHR4OiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBGSUVMRF9TSVpFKSxcblx0eTogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogRklFTERfU0laRSksXG59XG5cbmZ1bmN0aW9uIGdldEl0ZW0gKHgsIHksIHNuYWtlU2VnZW50cykge1xuXHRpZiAoIGZvb2RJdGVtLnggPT09IHggJiYgZm9vZEl0ZW0ueSA9PT0geSkge1xuXHRcdHJldHVybiA8Q29sb3IgcmVkPuKWoDwvQ29sb3I+XG5cdH1cblx0Zm9yICggY29uc3Qgc2VnbWVudCBvZiBzbmFrZVNlZ2VudHMpIHtcblx0XHRpZiAoc2VnbWVudC54ID09PSB4ICYmIHNlZ21lbnQueSA9PT0geSkge1xuXHRcdFx0cmV0dXJuIDxDb2xvciBncmVlbj7ilqA8L0NvbG9yPlxuXHRcdH1cblx0fVxufVxuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG5cblx0Y29uc3QgW3NuYWtlU2VnZW50cywgc2V0U25ha2VTZWdtZW50c10gPSB1c2VTdGF0ZShbXG5cdFx0e3g6OCwgeTo4fSxcblx0XHR7eDo4LCB5Ojd9LFxuXHRcdHt4OjgsIHk6Nn0sXG5cdF0pXG5cblxuXHRyZXR1cm4gKFxuXHRcdDxCb3ggZmxleERpcmVjdGlvbj0nY29sdW1uJyBhbGlnbkl0ZW1zPSdjZW50ZXInPlxuXHRcdFx0PFRleHQ+XG5cdFx0XHRcdDxUZXh0IGNvbG9yPVwiZ3JlZW5cIj5TbmFrZTwvVGV4dD4gZ2FtZVxuXHRcdDwvVGV4dD5cblx0XHRcdDxCb3ggZmxleERpcmVjdGlvbj0nY29sdW1uJz5cblx0XHRcdFx0e0ZJRUxEX1JPVy5tYXAoeSA9PiAoXG5cdFx0XHRcdFx0PEJveCBrZXk9e3l9PlxuXHRcdFx0XHRcdFx0e0ZJRUxEX1JPVy5tYXAoeCA9PiAoXG5cdFx0XHRcdFx0XHRcdDxCb3gga2V5PXt4fSA+PFRleHQ+e2dldEl0ZW0oeCx5LHNuYWtlU2VnZW50cykgfHwgJyAuICd9PC9UZXh0PjwvQm94PlxuXHRcdFx0XHRcdFx0KSl9XG5cdFx0XHRcdFx0PC9Cb3g+XG5cdFx0XHRcdCkpfVxuXHRcdFx0PC9Cb3g+XG5cdFx0PC9Cb3g+XG5cdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwO1xuXG5cblxuIl19